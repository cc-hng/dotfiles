[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
  call ddc#custom#patch_global('sources',
      \ ['around', 'file', 'rg', 'neosnippet']
      \ )
  call ddc#custom#patch_global('cmdlineSources',
      \ ['cmdline-history', 'input', 'file', 'around']
      \ )

  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'ignoreCase': v:true,
      \   'matchers': ['matcher_head', 'matcher_length'],
      \   'sorters': ['sorter_rank'],
      \   'converters': [
      \     'converter_remove_overlap', 'converter_truncate_abbr'
      \   ],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \ },
      \ 'buffer': {
      \   'mark': 'B',
      \ },
      \ 'necovim': {'mark': 'vim'},
      \ 'cmdline': {
      \   'mark': 'cmdline',
      \   'forceCompletionPattern': '\S/\S*',
      \   'dup': 'force',
      \ },
      \ 'input': {
      \   'mark': 'input',
      \   'forceCompletionPattern': '\S/\S*',
      \   'isVolatile': v:true,
      \   'dup': 'force',
      \ },
      \ 'line': {
      \   'mark': 'line',
      \ },
      \ 'mocword': {
      \   'mark': 'mocword',
      \   'minAutoCompleteLength': 3,
      \   'isVolatile': v:true,
      \ },
      \ 'nvim-lsp': {
      \   'mark': 'lsp',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
      \   'dup': 'force',
      \ },
      \ 'rtags': {
      \   'mark': 'R',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
      \ },
      \ 'file': {
      \   'mark': 'F',
      \   'isVolatile': v:true,
      \   'minAutoCompleteLength': 1000,
      \   'forceCompletionPattern': '\S/\S*'
      \ },
      \ 'cmdline-history': {
      \   'mark': 'history',
      \   'sorters': [],
      \ },
      \ 'shell-history': {'mark': 'shell'},
      \ 'zsh': {
      \   'mark': 'zsh',
      \   'isVolatile': v:true,
      \   'forceCompletionPattern': '\S/\S*'
      \ },
      \ 'rg': {
      \   'mark': 'rg',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \   'minAutoCompleteLength': 5,
      \   'enabledIf': "finddir('.git', ';') != ''",
      \ },
      \ 'neosnippet': {'mark': 'ns', 'dup': 'force'},
      \ })

  call ddc#custom#patch_global('sourceParams', {
      \ 'buffer': {
      \   'requireSameFiletype': v:false,
      \   'limitBytes': 50000,
      \   'fromAltBuf': v:true,
      \   'forceCollect': v:true,
      \ }})

  call ddc#custom#patch_filetype(
      \ ['help', 'markdown', 'gitcommit'], 'sources',
      \ ['input', 'around', 'rg', 'mocword', 'neosnippet']
      \ )

    call ddc#custom#patch_filetype(['ddu-ff-filter'], {
      \ 'keywordPattern': '[0-9a-zA-Z_:#-]*',
      \ 'sources': ['line', 'buffer'],
      \ 'specialBufferCompletion': v:true,
      \ })

  if has('nvim')
    call ddc#custom#patch_filetype(
            \ ['typescript', 'go', 'python', 'dart'], 'sources',
            \ ['input', 'nvim-lsp', 'around', 'neosnippet']
            \ )
    call ddc#custom#patch_filetype(
            \ ['c', 'cpp', 'cmake'], 'sources',
            \ ['input', 'nvim-lsp', 'around', 'neosnippet']
            \ )
    ""# call ddc#custom#patch_filetype(
    ""#         \ ['c', 'cpp'], 'sources',
    ""#         \ ['input', 'rtags', 'around', 'neosnippet']
    ""#         \ )
  endif

  call ddc#custom#patch_filetype(['FineCmdlinePrompt'], {
      \ 'keywordPattern': '[0-9a-zA-Z_:#]*',
      \ 'sources': ['cmdline-history', 'cmdline', 'around'],
      \ 'specialBufferCompletion': v:true,
      \ })

  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
      \ ])
  call ddc#custom#patch_global('ui', 'pum')

  " Context config
  call ddc#custom#set_context('go', { ->
      \ ddc#syntax#in('TSComment') ? {
      \   'sources': ['around', 'mocword'],
      \ } : {} })
  call ddc#custom#set_context('c', { ->
      \ ddc#syntax#in('Comment') ? {
      \   'sources': ['around', 'mocword'],
      \ } : {} })

  " For insert mode completion
  inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#map#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  inoremap <silent><expr> <C-l>   ddc#map#extend(pum#map#confirm())
  inoremap <silent><expr> <C-x><C-f> ddc#manual_complete('path')
  " inoremap <expr> l   pum#entered() ?
  "       \ '<Cmd> call pum#map#insert_relative(+1)<CR>' : 'l'
  " inoremap <expr> h   pum#entered() ?
  "       \ '<Cmd> call pum#map#insert_relative(-1)<CR>' : 'h'

  " For command line mode completion
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ exists('b:ddc_cmdline_completion') ?
  \ ddc#manual_complete() : nr2char(&wildcharm)
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-c>   <Cmd>call pum#map#cancel()<CR>
  cnoremap <C-o>   <Cmd>call pum#map#confirm()<CR>

  call ddc#enable()
'''
hook_add = '''
  nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
  nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?

  function! CommandlinePre(mode) abort
    " Note: It disables default command line completion!
    set wildchar=<C-t>
    set wildcharm=<C-t>

    cnoremap <expr><buffer> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ exists('b:ddc_cmdline_completion') ? ddc#map#manual_complete() : "\<C-t>"

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    if a:mode ==# ':'
      call ddc#custom#patch_buffer('cmdlineSources',
              \ ['cmdline-history', 'cmdline', 'around'])
      call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#]*')
    else
      call ddc#custom#patch_buffer('cmdlineSources',
              \ ['around', 'line'])
    endif

    autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd MyAutoCmd InsertEnter <buffer> ++once call CommandlinePost()

    call ddc#enable_cmdline_completion()
  endfunction
  function! CommandlinePost() abort
    silent! cunmap <buffer> <Tab>

    " Restore sources
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif

    set wildcharm=<Tab>
  endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('max_width', 80)
  call pum#set_option('use_complete', v:true)
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-none'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-copilot'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-omni'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \ ['vim'], 'sources', ['necovim', 'around', 'file']
          \ )
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_truncate_abbr'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'
on_ft = ['c', 'cpp', 'cmake', 'dart', 'typescript', 'go', 'python']
if = 'has("nvim")'
depends = 'ddc.vim'
hook_source = '''
  lua << EOF
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  --local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end
  -- buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[e', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']e', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)

  -- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "==", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "==", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  end
end

local lsp = require 'lspconfig'
lsp.denols.setup{ on_attach = on_attach }
lsp.gopls.setup{ on_attach = on_attach }
lsp.dartls.setup{ on_attach = on_attach }
lsp.pylsp.setup{ on_attach = on_attach }
lsp.cmake.setup{ on_attach = on_attach }


local clangd_cmd = {
     "clangd", "--clang-tidy",
     "--completion-style=detailed",
     "--fallback-style=webkit"}
if vim.fn.has('mac') == 1 then
  clangd_cmd[#clangd_cmd + 1] = "--compile-commands-dir=build"
end
lsp.clangd.setup {
  cmd = clangd_cmd,
  on_attach = function(client, bufnr)
    local opts = { noremap=true, silent=true }
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<F4>', '<cmd>ClangdSwitchSourceHeader<CR>', opts)
    on_attach(client, bufnr)
  end,
}
--vim.lsp.handlers["textDocument/publishDiagnostics"] = function() end
--require'lspconfig'.sumneko.setup{}
EOF
'''

