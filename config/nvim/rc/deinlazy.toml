[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'
hook_source = '''
  " Note: for profile
  "let g:denops#server#deno_args = [
  "    \ '-q',
  "    \ '--no-check',
  "    \ '--unstable',
  "    \ '-A',
  "    \ '--inspect',
  "    \ ]
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

#[[plugins]]
#repo = 'Shougo/junkfile.vim'
#on_source = ['ddu.vim']
#hook_add = '''
#  nnoremap <silent> se <Cmd>Ddu junkfile -volatile<CR>
#'''

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = v:true
  let g:vinarise_guifont = 'Courier\ 10\ Pitch:h14'
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>'}
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

# [[plugins]]
# repo = 'rhysd/accelerated-jk'
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap <silent>j <Plug>(accelerated_jk_gj)
#   nmap <silent>k <Plug>(accelerated_jk_gk)
# '''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']
hook_add = '''
  let g:suda_smart_edit = v:true
'''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = 'go'
hook_source = '''
  let g:goimports_simplify = v:true
'''

[[plugins]]
repo = 'dag/vim2hs'
on_ft = 'haskell'
hook_source = '''
let g:haskell_conceal = v:false
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim") && !has("win32")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    additional_vim_regex_highlighting = false,
    ignore_install = {'phpdoc'},
    highlight = {
        enable = true,
        disable = {'c', 'help', 'startify'},
    },
}
EOF

" Enable syntax for non treesitter highlights
autocmd MyAutoCmd FileType c,help,gitcommit
\ if &l:syntax == '' | syntax enable | endif
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-textobjects'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'hrsh7th/vim-eft'
hook_source = '''
let g:eft_ignorecase = v:true
'''
hook_add = '''
nmap ;; <Plug>(eft-repeat)
xmap ;; <Plug>(eft-repeat)

nmap f <Plug>(eft-f)
xmap f <Plug>(eft-f)
omap f <Plug>(eft-f)
nmap F <Plug>(eft-F)
xmap F <Plug>(eft-F)
omap F <Plug>(eft-F)
'''
on_map = {n = '<Plug>', x = '<Plug>', o = '<Plug>'}

#[[plugins]]
#repo = 'teal-language/vim-teal'
#on_ft = 'teal'

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'mattn/vim-notification'
if = '!has("nvim")'

[[plugins]]
repo = 'mattn/vim-treesitter'
build = 'cd server && go build'
if = '!has("nvim")'
#on_event = 'BufRead'

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'InsertEnter'
hook_source = '''
  call echodoc#enable()
  let g:echodoc#type = 'virtual'
  let g:echodoc#events = ['PumCompleteDone', 'TextChangedP', 'PumCompleteChanged']
'''

# [[plugins]]
# repo = 'github/copilot.vim'
# hook_source = '''
# let g:copilot_no_maps = v:true
# imap <script><silent><nowait><expr> <C-g> copilot#Accept()
# '''

[[plugins]]
repo = 'VonHeikemen/fine-cmdline.nvim'
if = 'has("nvim")'
depends = 'nui.nvim'
on_lua = 'fine-cmdline'
hook_add = '''
nnoremap <C-p> <Cmd>lua require'fine-cmdline'.setup({
\  cmdline = {
\    enable_keymaps = false
\  },
\  popup = {
\    buf_options = {
\      filetype = 'FineCmdlinePrompt'
\    },
\  },
\  hooks = {
\    before_mount = function(input)
\      input.input_props.prompt = ''
\    end,
\    set_keymaps = function(imap, feedkeys)
\      local fn = require('fine-cmdline').fn
\      imap('<Esc'..'>', fn.close)
\      imap('<C-c>', fn.close)
\      imap('jj', fn.close)
\      imap('<C-p>', fn.up_history)
\      imap('<C-n>', fn.down_history)
\    end,
\  },
\})<CR><Cmd>lua require('fine-cmdline').open()<CR>
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
if = 'has("nvim")'
on_cmd = 'FuzzyMotion'
hook_add = '''
  nnoremap F   <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'tversteeg/registers.nvim'
depends = 'denops.vim'
if = 'has("nvim")'
on_map = '"'
hook_source = '''
let g:registers_paste_in_normal_mode = 1
let g:registers_hide_only_whitespace = 1
let g:registers_show_empty_registers = 0
'''

#------------------------------------------------------
# add by myself
# [[plugins]]
# repo = 'editorconfig/editorconfig-vim'
# on_event = 'BufRead'

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_lua = 'nvim-autopairs'
hook_add = '''
lua << EOF
require('nvim-autopairs').setup{}

-- If you want insert `(` after select function or method item
-- local cmp_autopairs = require('nvim-autopairs.completion.cmp')
-- local cmp = require('cmp')
-- cmp.event:on( 'confirm_done', cmp_autopairs.on_confirm_done({  map_char = { tex = '' } }))
EOF
'''

[[plugins]]
repo = 'terrortylor/nvim-comment'
on_lua = 'nvim_comment'
hook_add = '''
autocmd MyAutoCmd BufEnter *.cpp,*.h
    \ :lua vim.api.nvim_buf_set_option(0, "commentstring", "// %s")
autocmd MyAutoCmd BufFilePost *.cpp,*.h
    \ :lua vim.api.nvim_buf_set_option(0, "commentstring", "// %s")
lua require "nvim_comment".setup {}
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
on_lua = 'nvim-web-devicons'
hook_add = '''
lua require('nvim-web-devicons').setup {}
'''

[[plugins]]
repo = 'akinsho/bufferline.nvim'
on_lua = 'bufferline'
depends = 'nvim-web-devicons'
hook_add = '''
nnoremap <silent>gt <cmd>BufferLineCycleNext<CR>
nnoremap <silent>gT <cmd>BufferLineCyclePrev<CR>
nnoremap <silent>gb <cmd>BufferLinePick<CR>

lua require "bufferline".setup {
\   options = {
\     modified_icon = '✥',
\     buffer_close_icon = '',
\     always_show_bufferline = false,
\     offsets = {{filetype = "NvimTree", text = "File Explorer", text_align = "left"}},
\   }
\ }
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertEnter'
on_source = 'ddc.vim'
hook_source = '''
imap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
smap <silent><C-k>     <Plug>(neosnippet_jump_or_expand)
xmap <silent><C-k>     <Plug>(neosnippet_expand_target)

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:neosnippet#enable_completed_snippet = 0
let g:neosnippet#enable_complete_done = 0
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#expand_word_boundary = 1
"let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'

[[plugins]]
repo = 'kana/vim-smartchr'
on_event = 'InsertCharPre'
on_ft = ['c', 'cpp']
hook_source = '''
" inoremap <expr> , smartchr#one_of(', ', ',')
augroup MyAutoCmd
" Substitute .. into -> .
autocmd FileType c,cpp inoremap <buffer> <expr> .
        \ smartchr#loop('.', '->', '...')
augroup END
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
on_cmd = 'Vista'
hook_add = '''
nnoremap [Space]v :<C-u>Vista!!<CR>
let g:vista#renderer#enable_icon = 1
let g:vista_disable_statusline = 1
'''
# let g:vista#renderer#enable_icon = 1
# let g:vista_disable_statusline = 1
# let g:vista_default_executive = 'ctags'
# let g:vista_echo_cursor_strategy = 'floating_win'
# let g:vista_vimwiki_executive = 'markdown'
# let g:vista_executive_for = {
#   \  pandoc = 'markdown',
#   \  markdown = 'toc',
#   \  typescript = 'nvim_lsp',
#   \  typescriptreact =  'nvim_lsp',
#   \ }
# '''

# [[plugins]]
# repo = 'dense-analysis/ale'

# FIXME: empty lines
# https://github.com/Yggdroot/indentLine/issues/275
# [[plugins]]
# repo = 'Yggdroot/indentLine'
# on_event = 'BufRead'
# hook_add = '''
# let g:indentLine_char='¦'
# let g:indentLine_faster=1
# let g:indentLine_showFirstIndentLevel=v:true
# let g:indentLine_fileTypeExclude = [
#   \ 'text', 'sh', 'log',
#   \ 'markdown', 'json', 'txt',
#   \ 'help' ]
# let g:indentLine_bufTypeExclude = ['help', 'terminal', 'nofile']
# '''

# [[plugins]]
# repo = 'lukas-reineke/indent-blankline.nvim'
# on_lua = 'indent_blankline'
# hook_add = '''
# lua <<EOF
# vim.cmd [[highlight IndentBlanklineIndent guifg=#585858 gui=nocombine]]
# require("indent_blankline").setup {
#   char = '¦',
#   char_highlight_list = {IndentBlanklineIndent},
#   show_current_context = false,
#   show_current_context_start = false,
# }
# EOF
# '''


## --- debug tools ---
# [[plugins]]
# repo = "mfussenegger/nvim-dap"
# on_lua = "dap"
# hook_add = '''
#
# '''
#
# [[plugins]]
# repo = 'rcarriga/nvim-dap-ui'
# depends = 'nvim-dap'
# on_lua = 'dapui'
# hook_add = '''
# lua <<EOF
# require("dapui").setup({
#   icons = { expanded = "▾", collapsed = "▸" },
#   mappings = {
#     -- Use a table to apply multiple mappings
#     expand = { "<CR>", "<2-LeftMouse>" },
#     open = "o",
#     remove = "d",
#     edit = "e",
#     repl = "r",
#     toggle = "t",
#   },
#   -- Expand lines larger than the window
#   -- Requires >= 0.7
#   expand_lines = vim.fn.has("nvim-0.7"),
#   -- Layouts define sections of the screen to place windows.
#   -- The position can be "left", "right", "top" or "bottom".
#   -- The size specifies the height/width depending on position. It can be an Int
#   -- or a Float. Integer specifies height/width directly (i.e. 20 lines/columns) while
#   -- Float value specifies percentage (i.e. 0.3 - 30% of available lines/columns)
#   -- Elements are the elements shown in the layout (in order).
#   -- Layouts are opened in order so that earlier layouts take priority in window sizing.
#   layouts = {
#     {
#       elements = {
#       -- Elements can be strings or table with id and size keys.
#         { id = "scopes", size = 0.25 },
#         "breakpoints",
#         "stacks",
#         "watches",
#       },
#       size = 40, -- 40 columns
#       position = "left",
#     },
#     {
#       elements = {
#         "repl",
#         "console",
#       },
#       size = 0.25, -- 25% of total lines
#       position = "bottom",
#     },
#   },
#   floating = {
#     max_height = nil, -- These can be integers or a float between 0 and 1.
#     max_width = nil, -- Floats will be treated as percentage of your screen.
#     border = "single", -- Border style. Can be "single", "double" or "rounded"
#     mappings = {
#       close = { "q", "<Esc>" },
#     },
#   },
#   windows = { indent = 1 },
#   render = {
#     max_type_length = nil, -- Can be integer or nil.
#   }
# })
# EOF
# '''


# gitsigns
[[plugins]]
repo = "lewis6991/gitsigns.nvim"
on_event = ['BufReadPre', 'BufNewFile']
on_lua = 'gitsigns'
hook_source = '''
lua <<EOF
  require('gitsigns').setup {
    current_line_blame = false,
    signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
    numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
    signs = {
      add          = {hl = 'GitSignsAdd'   , text = '▋', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
      change       = {hl = 'GitSignsChange', text = '▋', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
      delete       = {hl = 'GitSignsDelete', text = '▋', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
      topdelete    = {hl = 'GitSignsDelete', text = '▔', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
      changedelete = {hl = 'GitSignsChange', text = '▎', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    },
    on_attach = function(bufnr)
      local gs = require "gitsigns"

      local function map(mode, l, r, opts)
        opts = opts or {}
        opts.buffer = bufnr
        vim.keymap.set(mode, l, r, opts)
      end

      -- Navigation
      map('n', ']c', function()
        if vim.wo.diff then return ']c' end
        vim.schedule(function() gs.prev_hunk() end)
        return '<Ignore>'
      end, {expr=true})

      map('n', '[c', function()
        if vim.wo.diff then return '[c' end
        vim.schedule(function() gs.next_hunk() end)
        return '<Ignore>'
      end, {expr=true})

      -- Actions
      map({'n', 'v'}, '<leader>hs', ':Gitsigns stage_hunk<CR>')
      map({'n', 'v'}, '<leader>hr', ':Gitsigns reset_hunk<CR>')
      map('n', '<leader>hS', gs.stage_buffer)
      map('n', '<leader>hu', gs.undo_stage_hunk)
      map('n', '<leader>hR', gs.reset_buffer)
      map('n', '<leader>hp', gs.preview_hunk)
      map('n', '<leader>hb', function() gs.blame_line{full=true} end)
      map('n', '<leader>tb', gs.toggle_current_line_blame)
      map('n', '<leader>hd', gs.diffthis)
      map('n', '<leader>hD', function() gs.diffthis('~') end)
      map('n', '<leader>td', gs.toggle_deleted)

      -- Text object
      map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
    end,
  }
EOF
'''

[[plugins]]
repo = "skywind3000/vim-terminal-help"
on_event = ["BufReadPre", "BufNewFile"]
hook_source = '''
let g:terminal_key='<C-t>'
let g:terminal_cwd=2
let g:terminal_height=15
let g:terminal_shell='zsh'
'''
